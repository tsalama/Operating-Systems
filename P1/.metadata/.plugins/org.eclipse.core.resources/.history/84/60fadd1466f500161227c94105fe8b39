/*
 * q.h
 *
 *  Tarek Salama | February 5, 2017
 *  CSE 330
 *
 */

#ifndef Q_H_
#define Q_H_

#include "TCB.h"
#include <stdlib.h>

TCB_t *NewItem();
void InitQueue(TCB_t **head);
void AddQueue(TCB_t **head, TCB_t *item);
TCB_t *DelQueue(TCB_t **head);
void RotateQ(TCB_t **head);

// returns a pointer to a new q-element
TCB_t* NewItem() {
	return (TCB_t *) malloc(sizeof(TCB_t));
}

// creates a empty queue, pointed to by the variable head.
void InitQueue(TCB_t **head) {
	*head = NULL;
}

// adds a queue item, pointed to by "item", to the queue pointed to by head.
void AddQueue(TCB_t **head, TCB_t *item) {
	//TCB_t *tempHead = *head;

	if (*head == NULL) {
		*head = item;
		(*head)->next = *head;
		(*head)->prev = *head;
	} else if ((*head)->next != *head) {
		*head = (*head)->next;
		item->next = (*head)->next;
		item->prev = *head;
		(*head)->next = item;
		(*head)->prev = item;
	} else if ((*head)->next == *head) {
		(*head)->next = item;
		(*head)->prev = item;
		item->next = *head;
		item->prev = *head;
	}
}

// deletes an item from head and returns a pointer to the deleted item
TCB_t* DelQueue(TCB_t **head) {
	//TCB_t *tempHead = *head;
	TCB_t *headNext = (*head)->next;
	TCB_t *item;

	if ((*head)->next == *head) {
		item = *head;
		*head = NULL;
	} else {
		item = *head;
		*head = (*head)->next;
		//(*head)->prev = (*head)->prev;
		//(*head)->prev->next = *head;
	}

	return item;
}

// Moves the header pointer to the next element in the queue.
// This is equivalent to AddQ(&head, DeleteQ(&head)), but is simpler to use and more efficient to implement.
void RotateQ(TCB_t **head) {
	if (head != NULL)
		AddQueue(head, DelQueue(head));
}

#endif /* Q_H_ */
