/**************************************************************************
                        Arizona State University
                        CSE430 Operating Systems
                                Project #1
                Abigael Omijie | abigael.omijie@asu.edu
                Katie Gosse    | kgosse@asu.edu
**************************************************************************/

#ifndef Q_H
#define Q_H

#include "TCB.h"
#include <stdlib.h>
#include <stdio.h>

//Functions Initialization
TCB_t *newItem();
TCB_t *deleteQueue(TCB_t **head);
void addQueue(TCB_t **head, TCB_t *item);
void initQueue(TCB_t **head);
void rotateQueue(TCB_t **head);

// returns a pointer to a new q-element(TCB_t)
TCB_t *newItem() {

    TCB_t *newItem = (TCB_t *) malloc(sizeof(TCB_t));
    return newItem;
}


// creates a empty queue, pointed to by the variable head.
void initQueue(TCB_t **head) {

    *head = NULL;
}

// adds a queue item, pointed to by “item”, to the queue pointed to by head.
void addQueue(TCB_t **head, TCB_t *item) {

    TCB_t *tempHead = *head;

    if (tempHead == NULL) {
        *head = item;
        (*head)->next = *head;
        (*head)->prev = *head;
    }

    else if (tempHead->next != tempHead) {
        tempHead = tempHead->next;
        item->next = tempHead->next;
        item->prev = tempHead;
        tempHead->next = item;
        (*head)->prev = item;
    }

    else if (tempHead->next == tempHead) {
        tempHead->next = item;
        tempHead->prev = item;
        item->next = tempHead;
        item->prev = tempHead;
    }
}

// deletes an item from head and returns a pointer to the deleted item
TCB_t *deleteQueue(TCB_t **head) {

    TCB_t *tempHead = *head;
    TCB_t *headNext = (*head)->next;
    TCB_t *item;

        if (headNext == tempHead) {
            item = *head;
            *head = NULL;
        }
        else {
            item = *head;
            *head = (*head)->next;
            (*head)->prev = (*head)->prev;
            (*head)->prev->next = *head;
        }
    return item;

}

// Moves the header pointer to the next element in the queue.
// This is equivalent to AddQ(&head, DeleteQ(&head)), but is simpler to use and more efficient to implement.
void rotateQueue(TCB_t **head) {

    if (head == NULL) {

        return;

    }
    else {

        addQueue(head, deleteQueue(head));

    }
}


#endif
